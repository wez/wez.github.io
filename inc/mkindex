#!/usr/bin/php
<?php # vim:ts=2:sw=2:et:ft=php:
# Reads posts and builds out the index data
include 'inc/rest.php';

$A = array();

function innerHTML($node)
{
  $t = '';
  if ($node->childNodes) {
    foreach ($node->childNodes as $child) {
      $t .= $child->ownerDocument->saveXML($child);
    }
    return $t;
  } else {
    return "<$node->nodeName>$node->textContent</$node->nodeName>";
  }
}

function excerpt_inner($doc, $data, $node)
{
  $avail = $data->limit - $data->words;
  if ($avail == 0) {
    $next = $node->nextSibling;
    $node->parentNode->removeChild($node);
    return $next;
  }

  if ($node->nodeType == XML_TEXT_NODE) {
    $w = preg_split("/\s+/", $node->textContent);
    if (count($w) > $avail) {
      $w = array_slice($w, 0, $avail);
      $t = ' ' . join(" ", $w) . " ...";
      $newnode = $doc->createTextNode($t);
      $parent = $node->parentNode;
      $newnode = $parent->insertBefore($newnode, $node);
      $parent->removeChild($node);
      $data->words += $avail;
      $data->over = true;
      return $newnode->nextSibling;
    } else {
      $data->words += count($w);
      return $node->nextSibling;
    }
  } else if ($node->childNodes) {
    $child = $node->firstChild;
    while ($child !== null) {
      $child = excerpt_inner($doc, $data, $child);
    }
    return $node->nextSibling;
  } else {
    throw new Exception("$node->nodeType $node->nodeName");
  }
}

function html_excerpt($content, $limit = 100)
{
//  echo "Input:\n$content\n\n\n";
  libxml_use_internal_errors(true);
  $doc = new DOMDocument;
  $doc->loadHTML('<?xml encoding="UTF-8">' . $content);
  foreach ($doc->childNodes as $item) {
    if ($item->nodeType == XML_PI_NODE) {
      $doc->removeChild($item);
    }
  }
  $doc->encoding = 'UTF-8';
  $xpath = new DOMXpath($doc);

  $data = new stdclass;
  $data->limit = $limit;
  $data->words = 0;

  foreach ($xpath->query("/html/body") as $ele) {
    excerpt_inner($doc, $data, $ele);
    break;
  }

  $subset = $doc->saveHTML();
  $subset = preg_replace("/^(.*)<body>/ism", "", $subset);
  $subset = preg_replace("/^<\/body>(.*)$/ism", "", $subset);

  // Not sure how this gets in there, but we don't want it
  $subset = str_replace("\x02", ' ', $subset);

  return $subset;
}

function load_page($filename)
{
  global $A;

  $content = file_get_contents($filename);
  $meta = json_decode(file_get_contents(dirname($filename) . '/meta.json'));

  if (!isset($meta->uniqid)) {
    throw new Exception("missing uniqid");
  }

  $filename = preg_replace('/^posts\//', '/', dirname($filename));


  $ent = new stdclass;
  $ent->subject = $meta->subject;
  $ent->date = $meta->date;
  $ent->changed = $meta->changed;
  $ent->path = $filename;
  $ent->tags = $meta->tags;
  $ent->excerpt = html_excerpt($content);
  $A['byid'][$meta->uniqid] = $ent;

  if (is_array($meta->aliases)) {
    foreach ($meta->aliases as $alias) {
      $A['alias']["/$alias"] = $meta->uniqid;
    }
  }
  if (is_array($meta->tags)) {
    foreach ($meta->tags as $tag) {
      $A['tags'][$tag][] = $meta->uniqid;
    }
  }
}

/* breadth-first filesystem traverse to find all the files
 * under a particular location */
function find_files_in($dirname)
{ 
  $d = opendir($dirname);
  $dirs = array();
  while (($name = readdir($d)) !== false) {
    if ($name[0] == '.') continue;
    $path = $dirname . '/' . $name;
    if (is_dir($path)) {
      $dirs[] = $path;
    } else if (preg_match("/\.html$/", $name)) {
      load_page($path);
    }
  } 
  closedir($d);
  foreach ($dirs as $path) {
    find_files_in($path);
  }
}

find_files_in('posts');

$latest_change = 0;

// Sort by most recent first
function sort_by_most_recent_item($a, $b)
{
  global $latest_change;

  $A = strtotime($a->date);
  if (isset($a->changed)) {
    $A = strtotime($a->changed);
  }
  $B = strtotime($b->date);
  if (isset($b->changed)) {
    $B = strtotime($b->changed);
  }
  $latest_change = max($latest_change, $A, $B);

  return $B - $A;
}

function sort_by_most_recent_id($a, $b)
{
  global $A;
  return sort_by_most_recent_item($A['byid'][$a], $A['byid'][$b]);
}

uasort($A['byid'], 'sort_by_most_recent_item');
foreach ($A['tags'] as $tag => $idlist) {
  usort($idlist, 'sort_by_most_recent_id');
  $A['tags'][$tag] = $idlist;
}

wfo_file_put('posts/articles.json', json_encode($A));

function rss_esc($str)
{
  return htmlspecialchars($str, ENT_QUOTES, 'utf-8');
}

$title = rss_esc('Wez Furlong');
$source = rss_esc('http://wezfurlong.org/blog/');
$description = rss_esc('Software Architect, OpenSourceror');
$now = rss_esc(date('r'));
$build = rss_esc(date('r', $latest_change));


// Build RSS feed
$feed = <<<XML
<rss version="2.0"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
>
  <channel>
    <title>$title</title>
    <link>$source</link>
    <description>$description</description>
    <language>en</language>
    <pubDate>$now</pubDate>
    <lastBuildDate>$build</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <creativeCommons:license>http://creativecommons.org/licenses/by/3.0/</creativeCommons:license>
XML;
$arts = array_slice($A['byid'], 0, 6);
foreach ($arts as $ent) {
  $title = rss_esc($ent->subject);
  $link = rss_esc('http://wezfurlong.org/blog' . $ent->path);
  $description = rss_esc($ent->excerpt . <<<HTML
<a href='$link'>Continue reading on wezfurlong.org</a><br/>
HTML
  );
  $author = rss_esc('Wez Furlong');
  $comments = rss_esc('http://wezfurlong.org/blog' . $ent->path . '#comments');
  $permalink = $link;
  if ($ent->changed) {
    $d = strtotime($ent->changed);
  } else {
    $d = strtotime($ent->date);
  }
  $pubDate = rss_esc(date('r', $d));

  $feed .= <<<XML
<item>
  <title>$title</title>
  <link>$link</link>
  <description>$description</description>
  <dc:creator>$author</dc:creator>
  <comments>$comments</comments>
  <guid isPermaLink="false">$permalink</guid>
  <pubDate>$pubDate</pubDate>
  <source url="$source">$source</source>
  <creativeCommons:license>http://creativecommons.org/licenses/by/3.0/</creativeCommons:license>
XML;

  foreach ($ent->tags as $tag) {
    $feed .= "<category>" . rss_esc($tag) . "</category>\n";
  }

  $feed .= "</item>\n";

}

$feed .= <<<XML
  </channel>
</rss>
XML;

file_put_contents('feed.xml', $feed);

