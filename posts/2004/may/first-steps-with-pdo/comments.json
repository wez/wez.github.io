[{"i":"d45206e7-d259-4fd5-8fa9-989457788094","d":"2004-05-23 12:15:00","u":"anon","n":"thekid@php.net","c":"<b>Complexity<\/b><br\/>\n<p>Although I like this API, I think the prepare()\/bindParam()\/execute() is overly complex for most cases. This solution is really good when it comes to batch inserts, for example, but usually, you'll only need to execute it once. Now imagine you're inserting into a table with 10 columns - that makes up ten lines of code consisting of   <\/p>\n<pre class=\"phpcode\">$stmt-&gt;bindParam(':name', $name, PDO_PARAM_STR, 64);<\/pre><p>...plus two for prepare() and execute(). Seems like quite an amount of boilerplate.   <\/p>\n<p>How about a sprintf()-style shortcut something like this:   <\/p>\n<pre class=\"phpcode\">$dbh-&gt;prepare('insert into test (name, value) values (%64s, %64s)')-&gt;execute($name, $value);<\/pre><p>The semantics used would be slightly different than sprintf():   <\/p>\n<p><ul>\n<li>%s prints and quotes a string, if NULL\n is passed, NULL appears <li>%64s defines the max. length (sprintf just overflows)\n <li>%d prints a numeric (or NULL)\n <li>%f prints a float (or NULL)\n   <\/ul>\n<p>(could be continued)  <\/p>","email":"thekid@php.net","url":null,"did":"51534938"},{"i":"cc591da9-2570-4f21-b63e-012eea66ecaa","d":"2004-05-23 13:04:00","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>or you could just use this...<\/b><br\/>\n<p>which should work with the current released PDO packages   <\/p>\n<pre class=\"phpcode\"><span class=\"default\">&lt;?php\n$dbh<\/span><span class=\"keyword\">-&gt;<\/span><span class=\"default\">prepare<\/span><span class=\"keyword\">(<\/span><span class=\"string\">'insert into test (name, value) values (:name, :value)'<\/span><span class=\"keyword\">)-&gt;<\/span><span class=\"default\">execute<\/span><span class=\"keyword\">(array(<\/span><span class=\"string\">':name'<\/span><span class=\"keyword\">=&gt;<\/span><span class=\"default\">$name<\/span><span class=\"keyword\">, <\/span><span class=\"string\">':value'<\/span><span class=\"keyword\">=&gt;<\/span><span class=\"default\">$value<\/span><span class=\"keyword\">));\n<\/span><span class=\"default\">?&gt;\n<\/span><\/pre><p>  <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org","did":"51534939"},{"i":"4d64dab8-6c08-488c-953f-c584e63e3c01","d":"2004-05-25 23:47:01","u":"anon","n":"Roman","c":"<b>Thank you<\/b><br\/>\n<p>One word, to both you, George (I just bought your book, btw!), and the rest of the people behind the scenes working to make this happen: Thanks.  <\/p>","email":"Roman","url":null,"did":"51534940"},{"i":"0deec2aa-3920-4e90-9a4a-ea903b7c7095","d":"2004-05-26 11:34:37","u":"anon","n":"Kai","c":"<b>thanks<\/b><br\/>\n<p>this db-handler\/abstraction\/wrapper is really nice. seems to &quot;adopt&quot; some mysqlI-features\/naming\/methods   <\/p>\n<p>thanks  <\/p>","email":"Kai","url":null,"did":"51534943"},{"i":"063bdb89-5f5a-4f0e-aecd-8e868659aab0","d":"2004-05-29 05:25:24","u":"anon","n":"bombshell","c":"<b>thank you<\/b><br\/>\n<p>I am feeling very well  <\/p>","email":"bombshell","url":null,"did":"51534945"},{"i":"da134e69-fb5e-485f-a843-5f4ae0ea190f","d":"2004-06-08 16:25:00","u":"anon","n":"cox@idecnet.com","c":"<b>My comments about the API<\/b><br\/>\n<p>My humble opinions after some years fighting with DB:   <\/p>\n<p><ul>\n<li>exec() should be query(), widly adopted and won't be confused with execute()\n   <\/ul>\n<p><ul>\n<li>I personally find this:\n   <\/ul>\n<pre>   \/\/ insert a record\r\n   $name = 'Foo';\r\n   $value = 'Bar';\r\n   $stmt-&gt;execute(); \r\n<\/pre><p>a font of rare and hard to find bugs   <\/p>\n<p><ul>\n<li>it's nice to have datatype abstraction, but i don't quiet agree on having validation of them. First because it at least will be very weak and won't frees you the need of proper validation (for ex at forms). Second because it'd force you to return an error or even worse, to cut a string without any warning.\n   <\/ul>\n<p><ul>\n<li>I find more clever to set the fetchmod e in query(). Doing it in $stmt-&gt;fetch(ASSOC) just ends calculating the mode each call, when there is no need. I don't know any case when switching the fetchmode on the fly could be useful.\n   <\/ul>\n<p><ul>\n<li>imho, PDO_FETCH_BOTH, shouldn't be the default mode, it's just a waste of memory. I'd go with ORDERED as default. A setFetchMode() method is a need btw :-)\n   <\/ul>\n<p><ul>\n<li>Common params needed by a query() function are: SQL, the args for preparing, the args for binding, the first row to fetch, the number of rows to fetch and the fetch mode. This api so won't let you any hole.\n   <\/ul>\n<p><ul>\n<li>why did you changed the format of the DSN? it took ages for people to learn it! ;)\n   <\/ul>\n<p>Thanks for your work in this stuff, finally one took it! Hope my comments helps on something.   <\/p>\n<p>Tomas V.V.Cox   <\/p>","email":"cox@idecnet.com","url":null,"did":"51534947"},{"i":"43c7f8de-ea69-4491-5139-3c7f8de923a1","d":"2006-01-13 19:00:46","u":"anon","n":"cfaria@desenvolve.net","c":"<b>firebird error connect<\/b><br\/>\n<p>i use firebird 1.5 and easyphp1.6 for intranet and i try to migrate to wampserver5 1.6 (wampserver.com) and i can't connect to the firebird,   <\/p>\n<p>i try to conect to my table clientes where the client is 'codcli=24'   <\/p>\n<p>who to do the script   <\/p>\n<p>help me i need a script for list, insert, update and delete, if i can't migrate i'm ben force to continue to use easyphp1.6.  <\/p>","email":"cfaria@desenvolve.net","url":null,"did":"51534948"},{"i":"4492ec02-884a-1971-1322-492ec020d261","d":"2006-06-16 17:36:01","u":"anon","n":"rxmccaf@youbetnet.com\/Ray McCaffity","c":"<b>sys admin<\/b><br\/>\n<p>A few typos.. In the top example above where you have... $dbh-&gt;setAttribute(PDO_ATTR_ERRMODE, PDO_ERRMODE_EXCEPTION);   <\/p>\n<p>It should actually be... $dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);   <\/p>\n<p>Same thing in your 4th example, where you have... while ($row = $stmt-&gt;fetch(PDO_FETCH_ASSOC)) {   <\/p>\n<p>It should be... while ($row = $stmt-&gt;fetch(PDO::FETCH_ASSOC)) {   <\/p>\n<p>At least with PHP 5.1.4   <\/p>\n<p>Ray M.  <\/p>","email":"rxmccaf@youbetnet.com\/Ray McCaffity","url":null,"did":"51534949"},{"i":"4492f68a-742f-0757-9750-492f68a3ac28","d":"2006-06-16 18:20:58","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>yes, constants changed names<\/b><br\/>\n<p>Those aren't typos, they were 100% correct at the time of writing.  <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org","did":"51534950"}]