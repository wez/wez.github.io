[{"i":"b7f4d97c-e6e8-46fb-8ccb-64463ce943cf","d":"2004-07-29 21:39:01","u":"anon","n":"jsweat_php@yahoo.com","c":"<b>Great<\/b><br\/>\n<p>Here we are, fighting for respectability with a decent object model in php5, and now you are going to have people looking down their noses at us for having GOTO in php ;)  The shame.  <\/p>","email":"jsweat_php@yahoo.com","url":null},{"i":"f6c4057c-fd55-4e9e-95cc-a8410e5435b2","d":"2004-07-29 21:53:20","u":"anon","n":"Sara Golemon","c":"<b>Ignorance is bliss isn't it?<\/b><br\/>\n<p>jsweat_php:   <\/p>\n<pre>  Did you even read Wez's article?  Or are you saying that you are proud of your off-hand dismissals?\r\n<\/pre><p>For the record everyone:   <\/p>\n<pre>  I've never had a need for gotos either.  This feature was never about need.  It's about the open source process.  Here's a piece of functionality that some people would like to use, so how about letting them use it?<\/pre>","email":"Sara Golemon","url":null},{"i":"4ef81eeb-7f74-4fc0-9a6c-2cb988d04b15","d":"2004-07-29 23:55:35","u":"anon","n":"CT","c":"<b>The Real Shame<\/b><br\/>\n<p>The real shame is the guys like Sweat and Moore are afraid of what the Java elite will think of them. C destroyed Pascal by ignoring just that kind of thinking and focusing on being useful.   <\/p>\n<p>I think that goto might just be one more reason why PHP5 is better than Java.   <\/p>\n<p>C# has goto and even allows you to &quot;goto case label;&quot; and &quot;goto default;&quot; for branching within a switch statement See: &quot;C# Goto&quot; (&quot;http:\/\/msdn.microsoft.com\/library\/default.asp?url=\/library\/en-us\/csspec\/html\/vclrfcsharpspec_8_9_3.asp&quot;). Now that is powerful and cool.   <\/p>\n<p>You don't have to use goto, but there are several circumstances (expecially in interpreted languages) where goto is clearer and perfoms better than either the structured programming statements or exceptions.   <\/p>\n<p>I think an interesting addition to the PHP goto would be to add a parameter like break has, but to limit how many nested enclosing structures can be jumped out of. It would default to 0 for the whole function\/program, but could give an error\/warning if set &gt; 0.   <\/p>","email":"CT","url":null},{"i":"5081108f-02fa-4468-a0d3-5a477cb21025","d":"2004-07-30 08:31:28","u":"anon","n":"jsweat_php@yahoo.com","c":"<b>It was a joke<\/b><br\/>\n<p>For the record I did read Wez's post.   <\/p>\n<p>I also include a wink emoticon in the comment, which is a clue that IT WAS A JOKE!   <\/p>\n<p>You seem a bit overly sensative on the issue.  <\/p>","email":"jsweat_php@yahoo.com","url":null},{"i":"75da8ec4-6925-4023-8391-9ef59a1225b0","d":"2004-07-30 13:16:51","u":"anon","n":"Ren","c":"<b>Don't think the patch goes far enough<\/b><br\/>\n<p>Don't think the patch goes far enough, it should also allow computed gotos. {phpcode goto $label; etc   <\/p>\n<p>This would help the linear performance of the PHPs switch() statement (where time is proportional to the number of case labels).   <\/p>\n<p>Currently working on a project that has 300+ case labels (and is likely too rise). This PHP is computer generated and not handwritten, (Think YACC), so the old maintenance\/spaghetti argument is a non-starter.   <\/p>\n<p>Even experimented with using an array of functions such like   <\/p>\n<pre class=\"phpcode\">$jumpTable = array(\ncreate_function('$a,$b', 'return $a+$b;'),\ncreate_function('$a,$b', 'return $a-b;'),\ncreate_function('$a,$b', 'return $a*$b;'),\ncreate_function('$a,$b', 'return $a\/$b;'),\ncreate_function('$a,$b', 'return $a%$b;'));<\/pre><p>and using   <\/p>\n<pre class=\"phpcode\">$jumpTable[$i]($a, $b);<\/pre><p>appears to perform better than PHP switch statement, so a computed goto should be even faster.   <\/p>\n<p>  <\/p>","email":"Ren","url":null},{"i":"bada7d03-559c-4eef-9008-60669d8cca23","d":"2004-07-30 13:40:11","u":"anon","n":"Ren","c":"<b>Oops<\/b><br\/>\n<p>  <\/p>\n<p>Just noticed the patch does do computed gotos.. ignore last post ;)  <\/p>","email":"Ren","url":null},{"i":"dfbf5fd4-0b36-4ffe-9913-f0c1b7f9d592","d":"2004-07-30 21:58:03","u":"anon","n":"Sencer","c":"<b>Code Complete<\/b><br\/>\n<p>Steve McConnell has a chapter on Go To in his classic &quot;Code Complete&quot;. It gives both sides equal time and presents their arguments. It even talks about the phony goto debates, he presents the handling of errors with and without gotos. He shows how <i>most<\/i> gotos can be replaced with code that is easier on the writer\/reader of the code, and he finally concludes:   <\/p>\n<p>&quot;In the remaining one case out of 100 in which a goto is a legitimate solution to the problem, document it clearly and use it. [...] But keep your mind open to gotoless apporaches suggested by other programmers. They might see something you don't.&quot;   <\/p>\n<p>I found that after reading the chapter I had no problems refraining myself from entering any Goto-Debate again. (well, I am not sure wether this counts...)  <\/p>","email":"Sencer","url":null},{"i":"5c63b02c-5b31-4d79-a8db-3e9f16c8d0d1","d":"2004-08-01 03:00:04","u":"anon","n":"marcus@lastcraft.com","c":"<b>We don't need bad stuff when we have good stuff<\/b><br\/>\n<p>Hi.   <\/p>\n<p>There are some really silly comments on this posting. The GOTO opposers have very good reasons for their stance. Attempts to shoot the messengers by labelling them as people parroting dogma is both uncalled for and just plain wrong. Jeff in particular has a very large amount of experience in maintaining long lived applications and he clearly stated his reasoning in his posts. And no one could accuse Jeff of being a Java wannabe.   <\/p>\n<p>There are good reasons why GOTO is fast disappearing off the face of the earth. Most experienced OO practitioners keep their methods short and if they want to blow out the stack they sparingly use exceptions.   <\/p>\n<p>A cry to performance is lame as if CPU performance were an issue you wouldn't be using an interpreted language like PHP. Other kinds of performance issues are best tackled with well factored code anyway. The C++ STL for example allows usage of appropriate algorithms for a task by making them plug-compatible. The STL also keeps everything exception safe. Try doing that with GOTOs :(.   <\/p>\n<p>Why when PHP is stripping junk out, like superfluous ampersands and umpteen case variations, does it have to put an equal amount of junk back in?   <\/p>\n<p>Not only the silly &quot;final&quot; keyword, universally hated amongst Java developers, but now we have GOTO, universally hated by developers who have to maintain code. Just because you can put a feature in does not mean you should. We already have a kitchen sink language and it's called Perl. PHP has destroyed Perl in the web arena and Python is busy eradicating it from the Unix\/GUI arena as well.   <\/p>\n<p>Simplicity works better. Clutter diminishes the value of the stuff you already have and makes the language harder to extend in the future. Low grade features reduce the utility of a language by increasing the cognitive load, the documentation and the learning curve. If something is used rarely, or worse if there are far better ways of doing things, it should be removed. The language will be better for it.   <\/p>\n<p>yours, Marcus  <\/p>","email":"marcus@lastcraft.com","url":null},{"i":"b99569ee-8bd3-4b84-ac99-0def21ce627b","d":"2004-08-01 05:41:21","u":"anon","n":"Sara Golemon","c":"<b>Why, Why Not, and How<\/b><br\/>\n<p>Why? Because it's harmless.  Don't give me this &quot;unmaintainability&quot; argument all over again.  It holds about as much water as a swizel stick.  I'm tired of hearing it.   <\/p>\n<p>Why not? Because it's insipid and unnecessary.  There are hacks that give the procedural programmer the same effects, the oop coder will never deign acknowledge its existence, and the high-performance coder has already ported that loop to C.   <\/p>\n<p>How?  Implementation two is up at http:\/\/pecl.org I'll resist the urge to call it castrated since the scope control enforced was necessary and the run-time evaluation was a sight silly to start with.  <\/p>","email":"Sara Golemon","url":null},{"i":"ec1ffefe-728a-4c7a-b3c2-5ea12c80b105","d":"2004-08-01 16:11:36","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>Performance *is* a valid issue<\/b><br\/>\n<pre>   &quot;A cry to performance is lame as if CPU performance were an issue\r\n    you wouldn't be using an interpreted language like PHP&quot;\r\n<\/pre><p>Think about it; PHP is &quot;fast enough&quot; in most places, but there are always going to performance critical sections that need that little extra boost.  Are you seriously suggesting that it is better to choose another language than to make the current one, which is otherwise ideal, go faster in those critical sections?   <\/p>\n<pre>    &quot;There are good reasons why GOTO is fast disappearing off\r\n    the face of the earth.&quot;\r\n<\/pre><p>Is it?  Did you try grepping through the sources for the software that you have installed on your system for the keyword &quot;goto&quot;?  Do you have statistics to back up your claim that it is in decline?   <\/p>\n<p>I'll re-jig my analogy now: rather than equating GOTO to guns, I'll equate it to a knife.  An inexperienced user can cut themselves with it, but a skilled user can employ the knife to carve a work of art.   <\/p>\n<p>Just because there is a learning curve in knife wielding, should we deny the more skilled people the ability to carve their works of art?   <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org"},{"i":"a436bafd-2416-45e6-92ad-4d93459f5c44","d":"2004-08-13 20:23:44","u":"anon","n":"marcus@lastcraft.com","c":"<b>Marcus<\/b><br\/>\n<p>Hi...   <\/p>\n<p>OK, I just grepped all the <b>.py and the <\/b>.rb files on my linux box and found precisely none.   <\/p>\n<p>Your performance argument is lame. You will gain a few percent at best in a few very obscure and pathological situations by adding GOTO. Every performance problem I have ever run across has required order of magnitude improvements that have required more radical solutions than script twiddling.   <\/p>\n<p>The extra clutter of multiple ways of doing things hampers the experienced developers as much as the beginners, who will be punting anyway. It hampers in automated maintanence of software and tool development for a start. I wouldn't fancy writing a refactoring tool for a language with GOTOs all over the place :(.   <\/p>\n<p>It hurts PHP too. That's another feature that has to be maintained, documented, tested and bug-fixed. That's time that could be spent optimising PHP, assuming that the GOTO code doesn't get in the way of such optimisations.   <\/p>\n<p>If you want to keep enterprise level developers within the PHP community, PHP is currently failing at this, then you need to give them features that are useful. Say namespaces.   <\/p>\n<p>GOTO isn't a craft knife, it's a hatchet from the days when that was the only sharp instrument available.   <\/p>\n<p>yours, Marcus  <\/p>","email":"marcus@lastcraft.com","url":null},{"i":"dcdb7048-0d0d-42c0-8eb4-36c8c4d62804","d":"2004-08-13 21:35:05","u":"anon","n":"magnus@php.net","c":"<b>Give us goto!<\/b><br\/>\n<p>I have lots of code that really would benefit in readability and probably speed too if we had goto in PHP. It's a pre-parser that converts a file that can be written by humans and that are easy to understand into another file that is easy and fast to parse with PHP. The original files are fast to parse too, but they shouldn't change that often and are used quite a lot, so pre-parse-transformation should make the whole application much faster.   <\/p>\n<p>The bad thing with it is that the code is really unreadable as it is now with nested loops and breaks in different levels to emulate goto and did I mention that there are lots and lots of if-statements there too ? Each breaking the loops in different ways.   <\/p>\n<p>I know, I know, everyone isn't writing a parser, but obviously a lot of people do, but there are other things too that could use goto to make the code faster and\/or easier to understand.  <\/p>","email":"magnus@php.net","url":null},{"i":"c04cecf7-8e25-426a-a99f-1148e2615294","d":"2004-09-01 13:50:04","u":"gurugeek@php.net","n":"David Costa","c":"<b>+1 for GOTO<\/b><br\/>\n<p>If you want to keep enterprise level developers within the PHP community, PHP is currently failing at this,   <\/p>\n<p>I don't think that this is accurate. PHP is doing pretty well in the corporate world. The reason for ASP and JSP to maintain a strong position in certain markets has nothing to do with the language but with the type of contract\/partnership\/corporate mambo in that particular field e.g. banks in Switzerland use JSP for the native SSL support and the partnership between HP and Sun for tailored solutions (if you are a bank you need someone to sue when things go awry).   <\/p>\n<p>So please don't use your argument against the GOTO, for which I am certainly +1, to quote inaccurate details about PHP adoption by &quot;enterprised level developers&quot;.   <\/p>\n<p>If you don't like it, don't use it. The maintainability issue doesn't really make sense to me.   <\/p>\n<p>  <\/p>","email":"gurugeek@php.net","url":null},{"i":"48988240-3d8c-4709-90aa-1df30808261f","d":"2008-08-05 12:39:28","u":"anon","n":"tdshorter@hotmail.com","c":"<b>goto needed<\/b><br\/>\n<p>Dear Wez,<\/p>\n<p>A complete newby, I am writing an application for me, to be used and maintained by me, using Php, HTML, MySQL, and some javascript. Today was the first time I needed a goto, and I was amazed to find it doesn&#039;t exist in Php. It would have been very useful. I think really it is my own business if I write spaghetti code... As it is, I had to make an unusually complex loop, using control variables which were themselves modified by developments within the loop. I think a goto would have been much easier to use in this instance, easier to maintain, and less time consuming. I think keeping goto out of php is an undemocratic attitude, which doesn&#039;t recognise that different people have different programming styles. People who don&#039;t like gotos need not use them! Of course I would not use a goto to send execution into the middle of a loop, and if I did, I would be the only one to suffer the consequences.<\/p>\n<p>Hopefully goto will be added to Php 6.0!<\/p>\n<p>Yours,<\/p>\n<p>Tristram Shorter<\/p>\n<p>tdshorte@hotmail.com<\/p>\n<p>(Concepcion, Chile)<\/p>","email":"tdshorter@hotmail.com","url":null}]