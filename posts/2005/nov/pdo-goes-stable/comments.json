[{"i":"43891028-a0fd-1402-4448-38910284e7c3","d":"2005-11-27 01:47:20","u":"anon","n":"Justin","c":"<b>PDO Question<\/b><br\/>\n<p>Is there some reason why there is no PDOStatement method to get the number of rows returned by a SELECT query? I find this very bizarre...  <\/p>","email":"Justin","url":null},{"i":"438913fb-00cc-8827-1638-38913fb34500","d":"2005-11-27 02:03:39","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>The server doesn't know the rowCount...<\/b><br\/>\n<p>I'm guessing that you're the justin that commented on the rowCount() (http:\/\/us3.php.net\/manual\/en\/function.pdostatement-rowcount.php) docs in the manual.   <\/p>\n<p>rowCount is tricky, because the server doesn't know how many rows there are until it's reached the last one.  So, to count the rows, you either need to ask the server to count them, or to fetch them all.   <\/p>\n<pre class=\"phpcode\"><span class=\"default\">&lt;?php\n   $rows <\/span><span class=\"keyword\">= <\/span><span class=\"default\">$db<\/span><span class=\"keyword\">-&gt;<\/span><span class=\"default\">query<\/span><span class=\"keyword\">(<\/span><span class=\"string\">\"SELECT * FROM FOO\"<\/span><span class=\"keyword\">);\n   echo <\/span><span class=\"string\">\"There were \"<\/span><span class=\"keyword\">, <\/span><span class=\"default\">count<\/span><span class=\"keyword\">(<\/span><span class=\"default\">$rows<\/span><span class=\"keyword\">), <\/span><span class=\"string\">\" rows\"<\/span><span class=\"keyword\">;\n   foreach (<\/span><span class=\"default\">$rows <\/span><span class=\"keyword\">as <\/span><span class=\"default\">$row<\/span><span class=\"keyword\">) {\n      ...\n   }\n<\/span><span class=\"default\">?&gt;\n<\/span><\/pre><p>And if you're thinking &quot;urgh, so I have to fetch <b>all<\/b> the rows if I use this method&quot;, then you're starting to understand what mysql and postgresl client libraries are doing under the hood to get you that information.   <\/p>\n<p>See also: mysql_unbuffered_query() (http:\/\/us3.php.net\/mysql_unbuffered_query).  <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org"},{"i":"43891528-b0cb-5275-0378-38915284daf1","d":"2005-11-27 02:08:40","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>->fetchAll()<\/b><br\/>\n<p>Typos happen to the best of us; that sample should read:   <\/p>\n<pre class=\"phpcode\"><span class=\"default\">&lt;?php\n   $rows <\/span><span class=\"keyword\">= <\/span><span class=\"default\">$db<\/span><span class=\"keyword\">-&gt;<\/span><span class=\"default\">query<\/span><span class=\"keyword\">(<\/span><span class=\"string\">\"SELECT * FROM FOO\"<\/span><span class=\"keyword\">)-&gt;<\/span><span class=\"default\">fetchAll<\/span><span class=\"keyword\">();\n   echo <\/span><span class=\"string\">\"There were \"<\/span><span class=\"keyword\">, <\/span><span class=\"default\">count<\/span><span class=\"keyword\">(<\/span><span class=\"default\">$rows<\/span><span class=\"keyword\">), <\/span><span class=\"string\">\" rows\"<\/span><span class=\"keyword\">;\n   foreach (<\/span><span class=\"default\">$rows <\/span><span class=\"keyword\">as <\/span><span class=\"default\">$row<\/span><span class=\"keyword\">) {\n      ...\n   }\n<\/span><span class=\"default\">?&gt;<\/span><\/pre>","email":"wez@netevil.org","url":"http:\/\/netevil.org"},{"i":"438917ac-3969-8955-8347-38917acd872c","d":"2005-11-27 02:19:24","u":"anon","n":"Justin","c":"<b>oh?<\/b><br\/>\n<p>I'll be the first to admit that I have a high level understanding of things because I skipped over the C\/C++ type languages and only have lots of experience with scripting languages.   <\/p>\n<p>So, if that is the explanation, then does that mean that when I do a query, the result is just a resource to get the resulting data from the server and the initial response from the server doesn't actually contain the resulting data? So when you did (in older school php):   <\/p>\n<p>while ($row = mysql_fetch_assoc($result)) { ...    <\/p>\n<p>Was it actually communnicating with the server on each iteration of the loop to grab the next row in the result?  <\/p>","email":"Justin","url":null},{"i":"43891b18-2d0a-9111-9200-3891b1901f1d","d":"2005-11-27 02:34:00","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>mysql and postgresql pre-fetch and buffer the resultset<\/b><br\/>\n<p>If you've been using mysql_query() and its postgres equivalent, then you've been using buffered queries that pre-fetch the entire dataset before returning control to your PHP script.  mysql_fetch_assoc() then iterates over this in-memory cache.   <\/p>\n<p>This approach is fine for small result-sets, but as the number of rows you're pulling out gets larger, you start to feel the pain; you have to wait for all 1 million rows to come back before you can start to process the first row.  Not only that, but the data is buffered in memory.  To make things worse, PHP needs to copy it into its own memory space when returning the data to the script.  If you're sloppy about freeing the query resource and you're building up arrays to hold all the rows, you're doubling your memory footprint.   <\/p>\n<p>mysql_unbuffered_query was introduced to alleviate this problem, and the trade-off is that you can't determine the rowcount without fetching all the rows.  Sound familiar?   <\/p>\n<p>This is a common theme among database APIs, particularly the high-end databases.   <\/p>\n<p>Is each fetch call communicating with the server?  That depends on the underlying implementation.  For instance, postgres is always pre-fetched and totally buffered, because its client library doesn't offer an alternative.  Oracle allows you to configure a pre-fetch size so that you can fetch a decent sized chunk every so often; this is pre-set to a decent size that will work well for most people.   I haven't looked at the mysql internals, but I imagine that it also has a similar approach for unbuffered queries.  <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org"},{"i":"4389a2df-642a-9087-4080-389a2dfba54d","d":"2005-11-27 12:13:19","u":"anon","n":"akorthaus@web.de","c":"<p>What about setting the FetchMode for the whole PDO Object? So you don't need to pass the FetchMode to every Query\/Statement in all your scripts.   <\/p>\n<p>Here a possible implementation: http:\/\/news.php.net\/php.pecl.dev\/3122   <\/p>\n<p>(If you are interested I can try to provide a complete patch against HEAD)   <\/p>\n<p>Perhaps I'd call the methode setFetchMode() (like in Statement), not setDefaultFetchMode(). Or an attribute could be used, but I'd prefer a methode.  <\/p>","email":"akorthaus@web.de","url":null},{"i":"4389a319-8cda-4533-1106-389a319dcb25","d":"2005-11-27 12:14:17","u":"anon","n":"akorthaus@web.de","c":"<p>PDO-1.0.1 changelog states:   <\/p>\n<p>&quot;It is highly recommended that you update to PHP 5.1 before using PDO.&quot;   <\/p>\n<p>Why not PHP 5.0? I'm using 5.1, but last time I tested PECL::PDO with 5.0, it worked fine!  <\/p>","email":"akorthaus@web.de","url":null},{"i":"4389a39f-d47f-5329-6785-389a39f2fcc8","d":"2005-11-27 12:16:31","u":"anon","n":"akorthaus@web.de","c":"<p>what's with the Firebird driver?  <\/p>","email":"akorthaus@web.de","url":null},{"i":"4389bbe8-803b-8571-0828-389bbe8ed1c5","d":"2005-11-27 14:00:08","u":"anon","n":"lists@cyberlot.net","c":"<p>Look into SQL_CALC_FOUND_ROWS if you are not worried about compatibility with any other database other then MySQL.   <\/p>\n<p>I used to use mysql_num_rows a lot but now I realize there is always another way to handle it.   <\/p>\n<p>  <\/p>","email":"lists@cyberlot.net","url":null},{"i":"4389bf03-b2dc-5845-0392-389bf03afc88","d":"2005-11-27 14:13:23","u":"anon","n":"lists@cyberlot.net","c":"<p>akorthaus you might want to check out http:\/\/us2.php.net\/manual\/en\/function.pdostatement-setfetchmode.php  <\/p>","email":"lists@cyberlot.net","url":null},{"i":"4389d8d0-ad8b-3686-9594-389d8d08f98d","d":"2005-11-27 16:03:28","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>PHP 5.1 is recommended<\/b><br\/>\n<p>because it's the latest greatest PHP release and obsoletes the 5.0 branch. PDO does indeed work with PHP 5.0, and we have no problem with you using it there, but we still recommend that you upgrade to PHP 5.1, because it's simply &quot;better&quot; than 5.0.  <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org"},{"i":"4389db23-f1c8-6799-9883-389db23d3c41","d":"2005-11-27 16:13:23","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>PDO::setDefaultFetchMode<\/b><br\/>\n<p>There's a lot of &quot;gumph&quot; to copy over to the PDO class from the PDOStatement class, and I'm not looking forward to the day when the two places get out of sync and a bug results.   <\/p>\n<p>Maybe I just write code differently from everyone else, but I prefer to specify how I want the data back in each case--it's rare that I want exactly the same fetch mode throughout my apps.   <\/p>\n<p>It should be possible to implement this feature by extending PDO and having it use your own custom PDOStatement class that calls PDOStatement::setFetchMode in its constructor.   <\/p>\n<p>Is that not sufficient for your needs? I like to measure up the pros and cons before diving in and implementing it.   <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org"},{"i":"4389dc58-f8d2-1046-9813-389dc58b290d","d":"2005-11-27 16:18:32","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>Firebird is lacking developers<\/b><br\/>\n<p>I'm already stretched pretty thinly across all the other PDO drivers, I don't use firebird and don't have time to get stuck into it.  I only know of <b>1<\/b> PHP core developer that uses firebird and he's been too busy to track PDO development.   <\/p>\n<p>So, if there's someone out there that can code C and is really into firebird, step up and help get the firebird driver into shape!  <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org"},{"i":"438acc58-08af-1766-2592-38acc5884387","d":"2005-11-28 09:22:32","u":"anon","n":"Jakub Vrana","c":"<b>Experimental<\/b><br\/>\n<p>There's still the EXPERIMENTAL file in the sources. Are there any functions that should be still marked as experimental in the docs (e.g. PDOStatement::getColumnMeta)?  <\/p>","email":"Jakub Vrana","url":null},{"i":"438b0283-6ce5-8217-3624-38b028359f00","d":"2005-11-28 13:13:39","u":"anon","n":"akorthaus@web.de","c":"<b>PDO::setDefaultFetchMode<\/b><br\/>\n<p>Wez, perhaps you or someone else has a better idea how to implement it. I'm  quite sure the biggest part of the FetchMode settings can be extracted to one function, which can be used from PDO AND PDOStatement, so there will not be much code dublication. The only small\/noticable difference will be, that PDO class will not have PDO::FETCH_BOTH hardcoded to pass it as default value to PDOStatement, it will be a variable, which could be changed.   <\/p>\n<p>The benefit will be, that you do not need to wrap the methodes returning a PDOStatement object (PDO::query, PDO::prepare), or wrap the whole PDO class and\/or you don't need to set the FetchMode across, all over your scripts, if you are not happy with PDO::FETCH_BOTH.   <\/p>\n<p>This is the only missing &quot;low-level-feature&quot; of PDO which forces users to extend\/wrap PDO. A default FetchMode does not belong into user-space code, because it's the abstraction level of the PDO API.   <\/p>\n<p>If you use a convention like &quot;allways use FETCH_OBJ&quot; in your project, you can use PDO, and don't need to wrap at all, if a default fetch mode is available.   <\/p>\n<p>@Richard: I know PDOStatement::setFetchMode(), but I don't find it as useful as something like PDO::setDefaultFetchMode(). Have a look at http:\/\/news.php.net\/php.pecl.dev\/3124 for some more reasons.  <\/p>","email":"akorthaus@web.de","url":null},{"i":"438b1f5d-968b-4997-8345-38b1f5ddd7cf","d":"2005-11-28 15:16:45","u":"anon","n":"akorthaus@web.de","c":"<b>PDO support for Gentoo <\/b><br\/>\n<p>We have created some PDO ebuilds ( <i>dev-php5\/pecl-pdo<\/i> ) for the new <i>dev-lang\/php<\/i> packages in the &quot;production-ready&quot; branch of Gentoo PHP Overlay (http:\/\/svn.gnqs.org\/projects\/gentoo-php-overlay\/).   <\/p>\n<p>If you choose the <i>pdo-external<\/i> USE flag for <i>dev-lang\/php<\/i> , portage will install those PECL packages automatically. If you choose <i>pdo<\/i> you will get the PDO packages shipped with php-5.1 compiled into the php binaries, so you cannot upgrade them separately.   <\/p>\n<p>If you want to use PDO packages (as well as PHP 5.1), you have to add the <i>production-ready<\/i> directory to PORTDIR_OVERLAY in <i>\/etc\/make.conf<\/i> . Have a look at the wiki guides for details.  <\/p>","email":"akorthaus@web.de","url":null},{"i":"438bded4-5a00-4205-6569-38bded42a18a","d":"2005-11-29 04:53:40","u":"anon","n":"prasanna","c":"<b>Kudos!<\/b><br\/>\n<p>Congrats on the stable release! I remember your talk at the Zend PHP conference on PDO. It was informative.  <\/p>","email":"prasanna","url":null},{"i":"4390a452-daae-2135-0842-390a45251997","d":"2005-12-02 19:45:22","u":"anon","n":"Jeffrey Thompson <jthompson@gmail.com>","c":"<b>PDO Driver for MySQL 5.0?<\/b><br\/>\n<p>Does a PDO Driver exist for MySQL 5.0? The PHP PDO Manual Entry (http:\/\/us3.php.net\/pdo\/) only mentions MySQL 3.x\/4.x versions.  <\/p>","email":"Jeffrey Thompson <jthompson@gmail.com>","url":null},{"i":"4390a5c2-73f2-6250-7401-390a5c24b4e0","d":"2005-12-02 19:51:30","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>MySQL 5.0 works but...<\/b><br\/>\n<p>MySQL 5 is still young; I think there are some kinks in the client libraries, so if you find any weird behaviour, be sure to check the mysql bug tracker before opening a PHP bug.   <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org"},{"i":"43a2ef8b-69bd-6864-8879-3a2ef8bea6c1","d":"2005-12-16 16:47:07","u":"anon","n":"Richard Thomas <lists[at]cyberlot.net>","c":"<b>Extending PDO to set a fixed fetchmode<\/b><br\/>\n<p>Finally got around to really needing to extend pdo and came up with this, also allows you to set your fetch_mode   <\/p>\n<p>http:\/\/www.cyberlot.net\/extendingpdo  <\/p>","email":"Richard Thomas <lists[at]cyberlot.net>","url":null},{"i":"450b8105-054e-2156-4964-50b810523d48","d":"2006-09-16 04:43:49","u":"anon","n":"leblanc@tamu.edu Leblanc Meneses","c":"<b>nextRowset, closeCursor  - multiple result sets + postgresql<\/b><br\/>\n<p>no one was able to help me with cursors using the pdo interface.   <\/p>\n<p>http:\/\/www.sitepoint.com\/forums\/showthread.php?p=3040612#post3040612 see the bottom to see my current fix.   <\/p>\n<p>my fix isn't perfect.  is there a better way?  If not i'll extend pdo statement so the interface is similar to:   <\/p>\n<pre class=\"phpcode\">$stmt-&gt;executeCursor($sql)\nwhile($row = $stmt-&gt;getNextRow()){\n}\n$stmt-&gt;nextRecordSet();\/\/or nextCursorReference();<\/pre><p>  <\/p>","email":"leblanc@tamu.edu Leblanc Meneses","url":null},{"i":"c74ca9d6-1e0c-473c-be60-03d90808261f","d":"2007-11-27 18:35:50","u":"http:\/\/beebo.org\/","n":"http:\/\/beebo.org\/","c":"<b>custom PDOStatement?<\/b><br\/>\n<p>How can I create\/use a &quot;custom PDOStatement&quot;?  Do you mean that there&#039;s some way to convince PDO to return a custom class (derived from PDOStatement) when PDO-&gt;prepare() is called?<\/p>","email":"http:\/\/beebo.org\/","url":"http:\/\/beebo.org\/"},{"i":"c74d95fc-bb80-47f4-9884-03db0808261f","d":"2007-11-28 11:23:24","u":"http:\/\/netevil.org","n":"wezfurlong","c":"<b>custom PDOStatement<\/b><br\/>\n<p>It&#039;s not documented, but it can be done.  Here&#039;s a link to the test case in CVS: &lt;a href=&quot;http:\/\/cvs.php.net\/viewvc.cgi\/php-src\/ext\/pdo\/tests\/pdo_023.phpt?revision=1.8&amp;view=markup&quot;&gt;Custom PDOStatement&lt;\/a&gt;<\/p>\n<p><\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org"}]