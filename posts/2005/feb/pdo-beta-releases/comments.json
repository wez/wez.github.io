[{"i":"420a29cd-1215-1963-9160-20a29cd34539","d":"2005-02-09 15:18:37","u":"anon","n":"pmjones@ciaweb.net","c":"<b>No Array-Key Colons, Please?<\/b><br\/>\n<p>Hi, Wez --   <\/p>\n<p>First, PDO looks to be awesome; much of my future-oriented development revolves around it.   <\/p>\n<p>However, having to use colons in the array key (when binding into SQL statements) is a bit of extra hassle that would be nice to avoid.  Would it be possible to pass the array keys without colons, and have PDO add them in automatically?  That way we don't have to loop through arrays of (otheriwse) normal field names and prefix colons to them.   <\/p>\n<p>That's my only nitpick, really, and thanks for getting PDO out there in the first place.  :-)  <\/p>","email":"pmjones@ciaweb.net","url":null},{"i":"420a2c4a-9147-9949-6792-20a2c4a0cb7f","d":"2005-02-09 15:29:14","u":"http:\/\/www.coffeecode.net\/","n":"Dan Scott","c":"<b>Congratulations Wez!<\/b><br\/>\n<p>I know this has been a ton of work for you -- here's a piece of virtual celebratory cake on the first major release of PDO!   <\/p>\n<p>&lt;|   <\/p>\n<p>Mmm, delicious PDO cake... :)  <\/p>","email":"http:\/\/www.coffeecode.net\/","url":"http:\/\/www.coffeecode.net\/"},{"i":"420a2cce-fa84-0003-6660-20a2cce62932","d":"2005-02-09 15:31:26","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>the keys are passed direct to the driver<\/b><br\/>\n<p>Here are a couple of reasons why we force you to include the colon:   <\/p>\n<p><ul>\n<li>&quot;1&quot; smells like 1, which means bind by position.  This can cause ambiguity if you decide to bind some parameters by name and others by position (and you hav e decided to name your parameters after numbers).\n <li>For drivers that natively support named parameters (sqlite and OCI), those keys are passed directly to the driver\n <li>Some drivers (MS-SQL and ODBC\/DB-2) will support parameters that have an @ prefix instead of a colon when invoking stored procedures.  If PDO assumed that &quot;:&quot; was always the prefix, things would get very ugly in the code very quickly\n <li>and lastly, performance.  Why should we force PDO to have to allocate a new copy of the string with the prefix when the programmer can supply it as it is supposed to be sent?\n   <\/ul>\n<p>If you have an array of values already, you might want to use this more compact form, that assumes the array with numeric keys, where key 0 maps to the first ?, key 1 maps to the second, etc.   <\/p>\n<pre class=\"phpcode\"><span class=\"default\">&lt;?php\n$stmt <\/span><span class=\"keyword\">= <\/span><span class=\"default\">$db<\/span><span class=\"keyword\">-&gt;<\/span><span class=\"default\">prepare<\/span><span class=\"keyword\">(<\/span><span class=\"string\">\"insert into foo (bar, baz) values (?, ?)\"<\/span><span class=\"keyword\">);\n<\/span><span class=\"default\">$stmt<\/span><span class=\"keyword\">-&gt;<\/span><span class=\"default\">execute<\/span><span class=\"keyword\">(<\/span><span class=\"default\">$array_of_values<\/span><span class=\"keyword\">);\n<\/span><span class=\"default\">?&gt;\n<\/span><\/pre><p>You could also name your form elements so that they contain the : prefix too.  <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org"},{"i":"420a4090-b281-4867-6625-20a40903f7b2","d":"2005-02-09 16:55:44","u":"anon","n":"pmjones@ciaweb.net","c":"<b>ABout Colons again<\/b><br\/>\n<p>&quot;&quot;1&quot; smells like 1, which means bind by position.&quot;   <\/p>\n<p>I'm convinced.  Thanks for thinking everything out and taking time to explain to the unwashed.  :-)  <\/p>","email":"pmjones@ciaweb.net","url":null},{"i":"420a4926-e394-5533-5139-20a4926419f2","d":"2005-02-09 17:32:22","u":"anon","n":"Lukas","c":"<b>colons<\/b><br\/>\n<p>I am not convinced yet. The reality is that most people will have to add the colon just to make PDO happy while not taking advantage of the other mentioned possibilities. This will obviously be slower than having PDO do it form them.   <\/p>\n<p>So it seems to me it would make more sense to have another parameter in the bindParam() method that is optional and handles the colon, @ etc stuff.  <\/p>","email":"Lukas","url":null},{"i":"420a729e-0335-4406-2822-20a729e24fca","d":"2005-02-09 20:29:18","u":"anon","n":"Ren","c":"<pre class=\"phpcode\"><span class=\"default\">&lt;?php \n$stmt <\/span><span class=\"keyword\">= <\/span><span class=\"default\">$db<\/span><span class=\"keyword\">-&gt;<\/span><span class=\"default\">prepare<\/span><span class=\"keyword\">(<\/span><span class=\"string\">\"insert into foo (bar, baz) values (?, ?)\"<\/span><span class=\"keyword\">); \n<\/span><span class=\"default\">$stmt<\/span><span class=\"keyword\">-&gt;<\/span><span class=\"default\">execute<\/span><span class=\"keyword\">(<\/span><span class=\"default\">$array_of_values<\/span><span class=\"keyword\">); \n<\/span><span class=\"default\">?&gt;<\/span> }<\/pre><p>I guess the datatypes are inferred from the PHP types?   <\/p>\n<p>PS. <a target=\"_blank\" href=\"http:\/\/bugs.php.net\/?id=3412&amp;edit=1\">PHP Bug #3412<\/a> does seem fixed. :) Cheers.   <\/p>\n<p>  <\/p>","email":"Ren","url":null},{"i":"420cc628-622a-9468-2425-20cc6280a00f","d":"2005-02-11 14:50:14","u":"anon","n":"Louis-Philippe Huberdeau","c":"<b>Property-like access to bindings?<\/b><br\/>\n<p>I have been playing with PDO this morning, looks great! I just wonder if it could use a few more PHP5 features and SPL kind of thing.   <\/p>\n<p>$stmt-&gt;bindParam( ':foo', $var );   <\/p>\n<p>could become: $stmt-&gt;foo = $var;   <\/p>\n<p>and while( $row = $stmt-&gt;fetch() )   <\/p>\n<p>to foreach( $stmt as $row ) or foreach( $stmt-&gt;iterator() as $row )   <\/p>\n<p>I think the entire thing would be more 'PHP-Like'   <\/p>\n<p>I still have to take a look at the most advanced features like PDO_FETCH_CLASS but it does look like a lot of fun.   <\/p>\n<p>I don't usually like database abstraction layer, but this is only an API unification. I wish I had it back when I had to work with the oci extension.  <\/p>","email":"Louis-Philippe Huberdeau","url":null}]