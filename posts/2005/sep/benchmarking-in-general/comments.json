[{"i":"4333ac3a-0dc9-4609-2826-333ac3a8440c","d":"2005-09-23 07:18:18","u":"anon","n":"boots","c":"<b>sticking my neck out...<\/b><br\/>\n<p>considering the nature of the benchmark it seems that the quickest would be to cache the dataset result and not bother with the connection or the query at all.  <\/p>","email":"boots","url":null,"did":"51534415"},{"i":"4333f84f-4304-3785-7965-333f84f08ac6","d":"2005-09-23 12:42:54","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>you could do that<\/b><br\/>\n<p>but that's answering a slightly different question.   <\/p>\n<p>Dataset caching will massively improve the results for these tests, because they would only need to issue the query on the first time through.  What you'll end up seeing if you do that is all three test cases running with approximately the same number of iterations per minute--dataset caching changes the system and you wind up measuring how fast PHP can copy arrays rather than how fast PDO can give you a working database connection.   <\/p>\n<p>Contrived benchmarks like this are tricky beasts, eh?   <\/p>\n<p>The missing 4th case doesn't stray very far from what I've already covered in the blog post; any other ideas?  <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org","did":"51534417"},{"i":"4334313d-1dc7-1889-1071-334313d862d6","d":"2005-09-23 16:45:49","u":"anon","n":"dkaylor","c":"<b>combine the last two techniques<\/b><br\/>\n<p>How about both caching the PDO instance and using persistent connections?   <\/p>\n<pre class=\"phpcode\"><span class=\"default\">&lt;?php\n   <\/span><span class=\"keyword\">function <\/span><span class=\"default\">something<\/span><span class=\"keyword\">() {\n       static <\/span><span class=\"default\">$db <\/span><span class=\"keyword\">= <\/span><span class=\"default\">null<\/span><span class=\"keyword\">;\n       if (<\/span><span class=\"default\">$db <\/span><span class=\"keyword\">=== <\/span><span class=\"default\">null<\/span><span class=\"keyword\">) <\/span><span class=\"default\">$db <\/span><span class=\"keyword\">= new <\/span><span class=\"default\">PDO<\/span><span class=\"keyword\">(<\/span><span class=\"default\">$dsn<\/span><span class=\"keyword\">, <\/span><span class=\"default\">$user<\/span><span class=\"keyword\">, <\/span><span class=\"default\">$pass<\/span><span class=\"keyword\">, array(<\/span><span class=\"default\">PDO<\/span><span class=\"keyword\">::<\/span><span class=\"default\">ATTR_PERSISTENT <\/span><span class=\"keyword\">=&gt; <\/span><span class=\"default\">true<\/span><span class=\"keyword\">));\n       <\/span><span class=\"default\">$obj <\/span><span class=\"keyword\">= new <\/span><span class=\"default\">TestObject<\/span><span class=\"keyword\">(<\/span><span class=\"default\">$db<\/span><span class=\"keyword\">);\n       <\/span><span class=\"default\">$obj<\/span><span class=\"keyword\">-&gt;<\/span><span class=\"default\">doWork<\/span><span class=\"keyword\">();\n   }\n   <\/span><span class=\"default\">?&gt;<\/span><\/pre>","email":"dkaylor","url":null,"did":"51534419"},{"i":"4334abec-6fb7-8664-9535-334abec09f5a","d":"2005-09-24 01:29:16","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>that's it<\/b><br\/>\n<p>I expect the numbers for this case to be (near as damn it) identical to test 2, but this way is better because we're caching the connection for the next request to be run.  Our test harness (as it stands right now) can't measure that gain, so the numbers will appear to be identical.   <\/p>\n<p>When running for real, the second and subsequent runs through the web server will shave off the connection overhead completely.   <\/p>\n<p>What have we learned?  Two things:   <\/p>\n<p><ul>\n<li>It's good practice to cache expensive objects and resources in your script\n <li>It's good practice to use the persistent options for those objects\/resources where available\n   <\/ul>\n<p>We haven't necessarily learned enough to boldly state that this will improve performance by X% across the board.  These kind of numbers are usually very flawed because of the limited scope of the contrived test cases.  Suffice to say that the numbers we've seen are enough to prove that this is faster, within the scope of the tests that we ran.   <\/p>\n<p>(yes, that sounds like a lawyer talking :)  <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org","did":"51534420"},{"i":"4334f8a4-3585-2977-8781-334f8a427606","d":"2005-09-24 06:56:36","u":"anon","n":"boots","c":"<b>caught me in my deception<\/b><br\/>\n<p>Hi wez. Yes, I was obviously skewing the benchmark with a out-of-band optimization (which is often de-rigor for benchmarks, unfortunately). As you noted, extraordinary gains come from caching results -- the rest is really just academic in real-world performance when dealing with good overall driver implementations. PDO obviously meets that expectation -- hats off to you for yet another fantastic contribution to PHP and the community in general.   <\/p>\n<p>Respect and many thanks!  <\/p>","email":"boots","url":null,"did":"51534421"}]