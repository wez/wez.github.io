[{"i":"429d1242-4762-7278-3279-29d124228f0c","d":"2005-06-01 01:41:22","u":"anon","n":"boots","c":"<b>How about an old fashioned comparison?<\/b><br\/>\n<p>I've seen a lot of talk regarding what type of abstraction layer PDO is or isn't. It seems to me that more users would be better able to grok a comparison of PDO to other popular abstraction layers (ODBC and JDBC come to mind) than they would a technical discussion of how it is implemented or how it mediates user and backend communication. I may be off-base, but PDO seems a lot like ODBC to me -- and that alone says a lot.   <\/p>\n<p>I see the major end-user questions being: what am I committing myself to when I use PDO and what do I get for that commitment? What am I giving up?   <\/p>\n<p>From what I've seen, PDO is a step forward from today's PHP db handling.That's because I think there are three types of people: 1) those who want pragmatic performance and so program directly against a vendors API (in C, probably); 2) those who want <b>pragmatic<\/b> flexibility and use abstractions and scripting languages but sacrifice to-the-metal performance and finally 3) those who think they can have both absolute speed and <b>absolute<\/b> flexibility. (So far) I like PDO because it seems to address group 2 head on. The less said about group 3 the better.   <\/p>\n<p>Best Regards.  <\/p>","email":"boots","url":null,"did":"51534658"},{"i":"429d2408-f722-3830-8726-29d2408c2b9e","d":"2005-06-01 02:57:12","u":"http:\/\/netevil.org\/","n":"wezfurlong","c":"<b>PDO vs ODBC (and OCI)<\/b><br\/>\n<p>The similarity with ODBC is a knock-on from ODBC being a very well designed abstraction API; the guys that put it together thought of just about everything.  As it transpires, the way that ODBC does things works out to be &quot;the right way&quot; to implement the abstraction, in terms of breaking down the steps into chunks and running them in the right order.   <\/p>\n<p>OCI is structured similarly to ODBC, because those steps are more or less the same for Oracle (in fact, for most databases those steps are the same).  Between ODBC and Oracle, you're covering pretty much every major (dare I use the word &quot;Enterprise&quot; here? :) database.   <\/p>\n<p>PDO draws on this family of APIs (with a bit of influence from perl DBI) and php-spirit-ifies them.  This doesn't mean that I ignored the mysql api, far from it, it's just that the mysql api is something of a pre-school database api.  This is something that is changing as mysql matures, but I confess that I haven't looked at the newer APIs for that (we can't use the full-on GPL'd libraries at work, and I don't use mysql at home).   <\/p>\n<p>PDO hides some of the more painful parts that just don't need to be seen at the PHP script level.  Despite this, you're actually really close to the underlying DB APIs, so PDO should prove to be as fast as the current native DB extensions (perhaps even slightly faster).  What do you gain? &quot;nicer&quot; API, with grown-up features.  What do you lose? compared to the native extensions, nothing.  If you're using an existing abstraction layer, what you lose depends on how heavily you're leaning on the abstraction features.  PDO doesn't rewrite SQL, for example.   <\/p>\n<p>Coming back to your three groups of people; PDO is something like a 1.8, being mostly 2 but partly 1; there's not much overhead in PDO that you wouldn't end up having in a native C app, unless you hard-coded everything in-place (if you did that with OCI or ODBC in any reasonably sized project, you'd probably end up shooting yourself).   <\/p>\n<p>  <\/p>","email":"wez@netevil.org","url":"http:\/\/netevil.org","did":"51534660"},{"i":"429d5412-4135-2998-6294-29d541227676","d":"2005-06-01 06:22:09","u":"anon","n":"Christopher Thompson","c":"<p>I get the sense from what I have read about PDO that is was designed much like PEAR was, with a small group deciding what it should be and building it. And like PEAR its authors defend their decisions well. The real question about PDO is how many people will use it.  <\/p>","email":"Christopher Thompson","url":null,"did":"51534661"},{"i":"429db978-6fe5-1563-5097-29db978b989a","d":"2005-06-01 13:34:48","u":"anon","n":"lists@cyberlot.net","c":"<b>PDO is very much needed<\/b><br\/>\n<p>Out of the box PHP will now provide a database API that is both powerfull and flexable.   <\/p>\n<p>A person from the start without downloading any bulky librarys ( you know the ones that say things like &quot;who cares how big we are, just run a opcache program&quot;).   <\/p>\n<p>It really brings PHP forward when it comes to database development and I welcome PDO and php 5.1 with open arms  <\/p>","email":"lists@cyberlot.net","url":null,"did":"51534662"},{"i":"429f0e6d-a326-0093-0584-29f0e6d6efc8","d":"2005-06-02 13:49:33","u":"anon","n":"Lukas","c":"<p>just to state the obvious once more: PDO is a big step forward for PHP, no doubt!  <\/p>","email":"Lukas","url":null,"did":"51534663"}]